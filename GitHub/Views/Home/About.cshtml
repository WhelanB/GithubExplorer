@model Octokit.User

@{
    ViewData["Title"] = "";
}
<div class="text-center">
    <img class="img-circle" src="@Model.AvatarUrl" />
    <h2><b>@ViewBag.username</b></h2>
    <p>@Model.Bio</p>
</div>

<br />
<div class="container">
    <div class="row">
        <div class="col-md-3"></div>
        <div class="col-md-3">
            <p>My Repositories 1:</p>
            @foreach (Octokit.Repository x in ViewBag.repos)
              {<code>@x.Name @x.Language</code><br /><br />}
        </div>
        <div class="col-md-3">
            <p>Languages:</p>

            @foreach (Octokit.Repository x in ViewBag.repos)
               {<code>@x.Language</code><br /><br />}
       </div>

        <div class="col-md-3"></div>
    </div>
</div>
<svg width="960" height="960" font-family="sans-serif" font-size="10" text-anchor="middle"></svg>
<script src="https://d3js.org/d3.v4.min.js"></script>
<script>

    var svg = d3.select("svg"),
        width = +svg.attr("width"),
        height = +svg.attr("height");

    var format = d3.format(",d");

    var color = d3.scaleOrdinal(d3.schemeCategory20c);

    var pack = d3.pack()
        .size([width, height])
        .padding(1.5);
    var data = [];
    var size;
    var dict = {};
    @foreach (Octokit.Repository x in ViewBag.repos)
    {
        <text>

    if (typeof dict["@x.Language"] == 'undefined') {
        dict["@x.Language"] = 0;
    }
    dict["@x.Language"] = dict["@x.Language"] + 1;

        </text>

    }
    for(var key in dict){
        data.push({ id: key + " (" + dict[key] + ")", value: dict[key] });
    }

    function getRandomColor() {
        var red = Math.random() * 256;
        var green = Math.random() * 256;
        var blue = Math.random() * 256;

        // mix the color

        red = Math.floor((red + 255) / 2);
        green = Math.floor((green + 255) / 2);
            blue = Math.floor((blue + 255) / 2);


        return "rgb(" + red + "," + blue + "," + green + ")";
    }

    
    draw(data);
function draw(classes) {
  var root = d3.hierarchy({children: classes})
      .sum(function(d) { return d.value; })
      .each(function(d) {
        if (id = d.data.id) {
          var id, i = id.lastIndexOf(".");
          d.id = id;
          d.class = id.slice(i + 1);
        }
      });

  var node = svg.selectAll(".node")
    .data(pack(root).leaves())
    .enter().append("g")
      .attr("class", "node")
      .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });

  node.append("circle")
      .attr("id", function(d) { return d.id; })
      .attr("r", function (d) { return d.r; })
      .style("fill", function (d) { return getRandomColor(); });

  node.append("clipPath")
      .attr("id", function(d) { return "clip-" + d.id; })
    .append("use")
      .attr("xlink:href", function(d) { return "#" + d.id; });

  node.append("text")
      .attr("clip-path", function (d) { return "url(#clip-" + d.id + ")"; })
      .attr("font-size", function (d) { return d.r/4; })
    .selectAll("tspan")
      .data(function (d) { return d.class.split(/(?=[A-Z][^A-Z])/g); })
    .enter().append("tspan")
      .attr("x", 0)
      .attr("y", function (d, i, nodes) { return 13 + (i - nodes.length / 2 - 0.5) * 10; })
      .text(function(d) { return d; });

  node.append("title")
      .text(function(d) { return d.id + "\n" + format(d.value); });
}

</script>
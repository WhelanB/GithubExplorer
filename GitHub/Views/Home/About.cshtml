@model Octokit.User

@{
    ViewData["Title"] = "";
}
<div class="text-center">
    <br />
    <img class="img-circle" src="@Model.AvatarUrl" />
    <h2><b>@ViewBag.username</b></h2>
    <p>@Model.Bio</p>
</div>

<br />
<body>
    <div class="container">
        <div class="row">
            <div class="col-lg-4"></div>
            <div class="col-lg-4">
                <h3 class="text-center"><b>My Repositories:</b></h3>
                <br />
                @foreach (Octokit.Repository x in ViewBag.repos)
            {<code>@x.Name @x.Language</code><br /><br />}
            </div>
            
            <div class="col-lg-4"></div>
        </div>
    </div>
    <h3 class="text-center"><b>Repository Languages:</b></h3>
    <svg width="400" height="200" font-family="sans-serif" font-size="10" text-anchor="middle"></svg>
    <style>
        svg {
            width: 100%;
            height: 100%;
        }

        path.slice {
            stroke-width: 2px;
        }

        polyline {
            opacity: .3;
            stroke: black;
            stroke-width: 2px;
            fill: none;
        }
    </style>
    <script src="http://d3js.org/d3.v3.min.js"></script>
    <script>


    var data = [];
    var size;
    var dict = {};
    @foreach (Octokit.Repository x in ViewBag.repos)
    {
        <text>

    if (typeof dict["@x.Language"] == 'undefined') {
        dict["@x.Language"] = 0;
    }
    dict["@x.Language"] = dict["@x.Language"] + 1;

        </text>

    }
    for(var keys in dict){
        data.push({ key: keys + " (" + dict[keys] + ")", value: dict[keys] });
    }

    function getRandomColor() {
        var red = Math.random() * 256;
        var green = Math.random() * 256;
        var blue = Math.random() * 256;

        // mix the color

        red = Math.floor((red + 255) / 2);
        green = Math.floor((green + 255) / 2);
            blue = Math.floor((blue + 255) / 2);


        return "rgb(" + red + "," + blue + "," + green + ")";
    }


var svg = d3.select("svg")
	.append("g")

svg.append("g")
	.attr("class", "slices");
svg.append("g")
	.attr("class", "labels");
svg.append("g")
	.attr("class", "lines");

var width = 960,
    height = 450,
	radius = Math.min(width, height) / 2;

var pie = d3.layout.pie()
	.sort(null)
	.value(function(d) {
		return d.value;
	});

var arc = d3.svg.arc()
	.outerRadius(radius * 0.8)
	.innerRadius(radius * 0.4);

var outerArc = d3.svg.arc()
	.innerRadius(radius * 0.9)
	.outerRadius(radius * 0.9);

svg.attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

var key = function(d){ return d.data.key; };




change(data);




function change(data) {

	/* ------- PIE SLICES -------*/
	var slice = svg.select(".slices").selectAll("path.slice")
		.data(pie(data), key);

	slice.enter()
        .insert("path")
        .style("fill", function (d) { return getRandomColor() })
		.attr("class", "slice");

	slice
		.transition().duration(1000)
		.attrTween("d", function(d) {
			this._current = this._current || d;
			var interpolate = d3.interpolate(this._current, d);
			this._current = interpolate(0);
			return function(t) {
				return arc(interpolate(t));
			};
		})

	slice.exit()
		.remove();

	/* ------- TEXT LABELS -------*/

	var text = svg.select(".labels").selectAll("text")
		.data(pie(data), key);

	text.enter()
		.append("text")
		.attr("dy", ".35em")
		.text(function(d) {
			return d.data.key;
		});

	function midAngle(d){
		return d.startAngle + (d.endAngle - d.startAngle)/2;
	}

	text.transition().duration(1000)
		.attrTween("transform", function(d) {
			this._current = this._current || d;
			var interpolate = d3.interpolate(this._current, d);
			this._current = interpolate(0);
			return function(t) {
				var d2 = interpolate(t);
				var pos = outerArc.centroid(d2);
				pos[0] = radius * (midAngle(d2) < Math.PI ? 1 : -1);
				return "translate("+ pos +")";
			};
		})
		.styleTween("text-anchor", function(d){
			this._current = this._current || d;
			var interpolate = d3.interpolate(this._current, d);
			this._current = interpolate(0);
			return function(t) {
				var d2 = interpolate(t);
				return midAngle(d2) < Math.PI ? "start":"end";
			};
		});

	text.exit()
		.remove();

	var polyline = svg.select(".lines").selectAll("polyline")
		.data(pie(data), key);

	polyline.enter()
		.append("polyline");

	polyline.transition().duration(1000)
		.attrTween("points", function(d){
			this._current = this._current || d;
			var interpolate = d3.interpolate(this._current, d);
			this._current = interpolate(0);
			return function(t) {
				var d2 = interpolate(t);
				var pos = outerArc.centroid(d2);
				pos[0] = radius * 0.95 * (midAngle(d2) < Math.PI ? 1 : -1);
				return [arc.centroid(d2), outerArc.centroid(d2), pos];
			};
		});

	polyline.exit()
		.remove();
        };

        

    </script>
</body>
